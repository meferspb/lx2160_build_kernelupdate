From 9f9ff122580a3cc0b669e00d2f349e82293e889f Mon Sep 17 00:00:00 2001
From: Josua Mayer <josua@solid-run.com>
Date: Sat, 13 May 2023 16:51:21 +0300
Subject: [PATCH] net: dpaa2: support changing dpmac protocol with FW 10.28.100

10.28.100 was the first PoC NXP had released for changing the dpmac
protocol at runtime between 1 & 10 Gbps.

Signed-off-by: Josua Mayer <josua@solid-run.com>
---
 .../net/ethernet/freescale/dpaa2/dpaa2-mac.c  | 45 ++++++++++++++++---
 .../net/ethernet/freescale/dpaa2/dpaa2-mac.h  |  1 +
 2 files changed, 41 insertions(+), 5 deletions(-)

diff --git a/drivers/net/ethernet/freescale/dpaa2/dpaa2-mac.c b/drivers/net/ethernet/freescale/dpaa2/dpaa2-mac.c
index a4aad5431e82..5ca5fdc7eb8a 100644
--- a/drivers/net/ethernet/freescale/dpaa2/dpaa2-mac.c
+++ b/drivers/net/ethernet/freescale/dpaa2/dpaa2-mac.c
@@ -30,11 +30,25 @@ static int dpaa2_mac_cmp_ver(struct dpaa2_mac *mac,
 
 static void dpaa2_mac_detect_features(struct dpaa2_mac *mac)
 {
+	struct fsl_mc_version *fw_vers;
+	unsigned long if_mode_addr;
+
 	mac->features = 0;
 
 	if (dpaa2_mac_cmp_ver(mac, DPMAC_PROTOCOL_CHANGE_VER_MAJOR,
 			      DPMAC_PROTOCOL_CHANGE_VER_MINOR) >= 0)
 		mac->features |= DPAA2_MAC_FEATURE_PROTOCOL_CHANGE;
+
+
+	fw_vers = fsl_mc_get_version();
+	if (fw_vers->major == 10 && fw_vers->minor == 28 && fw_vers->revision == 100) {
+		if_mode_addr = 0x8c07080 + 0x4000 * (mac->mc_dev->obj_desc.id - 1);
+		mac->if_mode_reg = ioremap(if_mode_addr, 4);
+		if (!mac->if_mode_reg)
+			netdev_err(mac->net_dev, "ioremap on if_mode failed\n");
+		else
+			mac->features |= DPAA2_MAC_FEATURE_PROTOCOL_CHANGE;
+	}
 }
 
 static int phy_mode(enum dpmac_eth_if eth_if, phy_interface_t *if_mode)
@@ -267,6 +281,7 @@ static void dpaa2_mac_config(struct phylink_config *config, unsigned int mode,
 	struct dpmac_link_state *dpmac_state = &mac->state;
 	int err;
 	int i;
+	u32 val;
 
 	if (state->an_enabled)
 		dpmac_state->options |= DPMAC_LINK_OPT_AUTONEG;
@@ -282,11 +297,31 @@ static void dpaa2_mac_config(struct phylink_config *config, unsigned int mode,
 	if (!mac->serdes_phy)
 		return;
 
-	/* This happens only if we support changing of protocol at runtime */
-	err = dpmac_set_protocol(mac->mc_io, 0, mac->mc_dev->mc_handle,
-				 dpmac_eth_if_mode(state->interface));
-	if (err)
-		netdev_err(mac->net_dev,  "dpmac_set_protocol() = %d\n", err);
+	if (mac->if_mode_reg) {
+		val = ioread32(mac->if_mode_reg);
+		val &= ~0x3;
+		switch (state->interface) {
+			case PHY_INTERFACE_MODE_RGMII:
+			case PHY_INTERFACE_MODE_RGMII_ID:
+			case PHY_INTERFACE_MODE_SGMII:
+			case PHY_INTERFACE_MODE_1000BASEX:
+				val |= 0x3;
+				fallthrough;
+			case PHY_INTERFACE_MODE_10GBASER:
+			case PHY_INTERFACE_MODE_USXGMII:
+				val |= 0x1;
+				iowrite32(val, mac->if_mode_reg);
+				break;
+			default:
+				netdev_err(mac->net_dev, "%s: unhandled link mode %i, expect rx/tx errors!\n", __func__, state->interface);
+		}
+	} else {
+		/* This happens only if we support changing of protocol at runtime */
+		err = dpmac_set_protocol(mac->mc_io, 0, mac->mc_dev->mc_handle,
+								 dpmac_eth_if_mode(state->interface));
+		if (err)
+			netdev_err(mac->net_dev,  "dpmac_set_protocol() = %d\n", err);
+	}
 
 	err = phy_set_mode_ext(mac->serdes_phy, PHY_MODE_ETHERNET, state->interface);
 	if (err)
diff --git a/drivers/net/ethernet/freescale/dpaa2/dpaa2-mac.h b/drivers/net/ethernet/freescale/dpaa2/dpaa2-mac.h
index 0bc767248f6c..dd9fd02b96b8 100644
--- a/drivers/net/ethernet/freescale/dpaa2/dpaa2-mac.h
+++ b/drivers/net/ethernet/freescale/dpaa2/dpaa2-mac.h
@@ -28,6 +28,7 @@ struct dpaa2_mac {
 	enum dpmac_link_type if_link_type;
 	struct lynx_pcs *pcs;
 	struct fwnode_handle *fw_node;
+	void __iomem *if_mode_reg;
 	struct phy *serdes_phy;
 	struct phy *retimer_phys[2];
 
-- 
2.35.3

