From 2d18ee5b33795fe6cb1ca6b734b68739100dde9c Mon Sep 17 00:00:00 2001
From: Ioana Ciornei <ioana.ciornei@nxp.com>
Date: Wed, 10 Nov 2021 17:05:52 +0200
Subject: [PATCH 09/13] phy: add support for the Layerscape SerDes 28G

This patch adds minimal support for the SerDes 28G block found on the
LX2160A SoC. At the moment, only SGMII/1000Base-X and 10GBaseR are
supported.

At probe time, the platform driver will read the current
configuration of both PLLs found on a SerDes block and will determine
what protocols are supported using that PLL.

For example, if a PLL is configured to generate a clock net (frate) of
5GHz the only protocols sustained by that PLL are SGMII/1000Base-X
(using a quarter of the full clock rate) and QSGMII using the full clock
net frequency on the lane.

On the .set_mode() callback, the PHY driver will first check if the
requested operating mode (protocol) is even supported by the current PLL
configuration and will error out if not.
Then, the lane is reconfigured to run on the requested protocol.

Signed-off-by: Ioana Ciornei <ioana.ciornei@nxp.com>
---
 drivers/phy/freescale/Kconfig              |   8 +
 drivers/phy/freescale/Makefile             |   1 +
 drivers/phy/freescale/phy-fsl-serdes-28g.c | 521 +++++++++++++++++++++
 3 files changed, 530 insertions(+)
 create mode 100644 drivers/phy/freescale/phy-fsl-serdes-28g.c

diff --git a/drivers/phy/freescale/Kconfig b/drivers/phy/freescale/Kconfig
index 29b05925e1c5..b46c28672dc2 100644
--- a/drivers/phy/freescale/Kconfig
+++ b/drivers/phy/freescale/Kconfig
@@ -39,3 +39,11 @@ config PHY_FSL_IMX_PCIE
 	help
 	  Enable this to add support for the PCIE PHY as found on i.MX
 	  family of SOCs.
+
+config PHY_FSL_SERDES_28G
+	tristate "Freescale Layerscape SerDes PHY support"
+	depends on OF
+	select GENERIC_PHY
+	help
+	  Enable this to add support for the SerDes 28G PHY as found on NXP's
+	  Layerscape platform such as LX2160A.
diff --git a/drivers/phy/freescale/Makefile b/drivers/phy/freescale/Makefile
index 0675f155c47d..380809d3f34c 100644
--- a/drivers/phy/freescale/Makefile
+++ b/drivers/phy/freescale/Makefile
@@ -4,3 +4,4 @@ obj-$(CONFIG_PHY_FSL_IMX8MQ_USB)	+= phy-fsl-imx8mq-usb.o
 obj-$(CONFIG_PHY_MIXEL_MIPI_DPHY)	+= phy-fsl-imx8-mipi-dphy.o
 obj-$(CONFIG_PHY_SAMSUNG_HDMI_PHY)	+= phy-fsl-samsung-hdmi.o
 obj-$(CONFIG_PHY_FSL_IMX_PCIE)		+= phy-fsl-imx8-pcie.o
+obj-$(CONFIG_PHY_FSL_SERDES_28G)	+= phy-fsl-serdes-28g.o
diff --git a/drivers/phy/freescale/phy-fsl-serdes-28g.c b/drivers/phy/freescale/phy-fsl-serdes-28g.c
new file mode 100644
index 000000000000..841edf6c0477
--- /dev/null
+++ b/drivers/phy/freescale/phy-fsl-serdes-28g.c
@@ -0,0 +1,521 @@
+// SPDX-License-Identifier: GPL-2.0+
+/* Copyright (c) 2021 NXP. */
+
+#include <linux/module.h>
+#include <linux/phy.h>
+#include <linux/phy/phy.h>
+#include <linux/platform_device.h>
+
+#define SERDES28G_NUM_LANE			8
+#define SERDES28G_NUM_PLL			2
+
+/* General registers per SerDes block */
+#define SERDES28G_PCC8				0x10a0
+#define SERDES28G_PCC8_SGMII			0x1
+#define SERDES28G_PCC8_SGMII_DIS		0x0
+
+#define SERDES28G_PCCC				0x10b0
+#define SERDES28G_PCCC_10GBASER			0x9
+#define SERDES28G_PCCC_USXGMII			0x1
+#define SERDES28G_PCCC_SXGMII_DIS		0x0
+
+/* Per PLL registers */
+#define SERDES28G_PLLnRSTCTL(pll)		(0x400 + (pll) * 0x100 + 0x0)
+#define SERDES28G_PLLnRSTCTL_DIS(rstctl)	(((rstctl) & BIT(24)) >> 24)
+#define SERDES28G_PLLnRSTCTL_LOCK(rstctl)	(((rstctl) & BIT(23)) >> 23)
+
+#define SERDES28G_PLLnCR0(pll)			(0x400 + (pll) * 0x100 + 0x4)
+#define SERDES28G_PLLnCR0_REFCLK_SEL(cr0)	(((cr0) & GENMASK(20,16)))
+#define SERDES28G_PLLnCR0_REFCLK_SEL_100MHZ	0x0
+#define SERDES28G_PLLnCR0_REFCLK_SEL_125MHZ	0x10000
+#define SERDES28G_PLLnCR0_REFCLK_SEL_156MHZ	0x20000
+#define SERDES28G_PLLnCR0_REFCLK_SEL_150MHZ	0x30000
+#define SERDES28G_PLLnCR0_REFCLK_SEL_161MHZ	0x40000
+
+#define SERDES28G_PLLnCR1(pll)			(0x400 + (pll) * 0x100 + 0x8)
+#define SERDES28G_PLLnCR1_FRATE_SEL(cr1)	(((cr1) & GENMASK(28,24)))
+#define SERDES28G_PLLnCR1_FRATE_5G_10GVCO	0x0
+#define SERDES28G_PLLnCR1_FRATE_5G_25GVCO	0x10000000
+#define SERDES28G_PLLnCR1_FRATE_10G_20GVCO	0x6000000
+
+/* Per SerDes lane registers */
+/* Lane a General Control Register */
+#define SERDES28G_LNaGCR0(lane)			(0x800 + (lane) * 0x100 + 0x0)
+#define SERDES28G_LNaGCR0_PROTO_SEL_MSK		GENMASK(7,3)
+#define SERDES28G_LNaGCR0_PROTO_SEL_SGMII	0x8
+#define SERDES28G_LNaGCR0_PROTO_SEL_XFI		0x50
+#define SERDES28G_LNaGCR0_IF_WIDTH_MSK		GENMASK(2,0)
+#define SERDES28G_LNaGCR0_IF_WIDTH_10_BIT	0x0
+#define SERDES28G_LNaGCR0_IF_WIDTH_20_BIT	0x2
+
+/* Lane a Tx Reset Control Register */
+#define SERDES28G_LNaTRSTCTL(lane)		(0x800 + (lane) * 0x100 + 0x20)
+#define SERDES28G_LNaTRSTCTL_HLT_REQ		BIT(27)
+#define SERDES28G_LNaTRSTCTL_RST_DONE		BIT(30)
+#define SERDES28G_LNaTRSTCTL_RST_REQ		BIT(31)
+
+/* Lane a Tx General Control Register */
+#define SERDES28G_LNaTGCR0(lane)		(0x800 + (lane) * 0x100 + 0x24)
+#define SERDES28G_LNaTGCR0_USE_PLLF		0x0
+#define SERDES28G_LNaTGCR0_USE_PLLS		BIT(28)
+#define SERDES28G_LNaTGCR0_USE_PLL_MSK		BIT(28)
+#define SERDES28G_LNaTGCR0_N_RATE_FULL		0x0
+#define SERDES28G_LNaTGCR0_N_RATE_HALF		0x1000000
+#define SERDES28G_LNaTGCR0_N_RATE_QUARTER	0x2000000
+#define SERDES28G_LNaTGCR0_N_RATE_MSK		GENMASK(26,24)
+
+/* Lane a Rx Reset Control Register */
+#define SERDES28G_LNaRRSTCTL(lane)		(0x800 + (lane) * 0x100 + 0x40)
+#define SERDES28G_LNaRRSTCTL_HLT_REQ		BIT(27)
+#define SERDES28G_LNaRRSTCTL_RST_DONE		BIT(30)
+#define SERDES28G_LNaRRSTCTL_RST_REQ		BIT(31)
+
+/* Lane a Rx General Control Register */
+#define SERDES28G_LNaRGCR0(lane)		(0x800 + (lane) * 0x100 + 0x44)
+#define SERDES28G_LNaRGCR0_USE_PLLF		0x0
+#define SERDES28G_LNaRGCR0_USE_PLLS		BIT(28)
+#define SERDES28G_LNaRGCR0_USE_PLL_MSK		BIT(28)
+#define SERDES28G_LNaRGCR0_N_RATE_MSK		GENMASK(26,24)
+#define SERDES28G_LNaRGCR0_N_RATE_FULL		0x0
+#define SERDES28G_LNaRGCR0_N_RATE_HALF		0x1000000
+#define SERDES28G_LNaRGCR0_N_RATE_QUARTER	0x2000000
+#define SERDES28G_LNaRGCR0_N_RATE_MSK		GENMASK(26,24)
+
+#define SERDES28G_SGMIIaCR1(lane)		(0x1804 + (lane) * 0x10)
+#define SERDES28G_SGMIIaCR1_SGPCS_EN		BIT(11)
+#define SERDES28G_SGMIIaCR1_SGPCS_DIS		0x0
+#define SERDES28G_SGMIIaCR1_SGPCS_MSK		BIT(11)
+
+struct serdes28g_pll {
+	struct serdes28g_priv *priv;
+	u32 rstctl, cr0, cr1;
+	int id;
+	DECLARE_PHY_INTERFACE_MASK(supported);
+};
+
+struct serdes28g_priv {
+	void __iomem *base;
+	struct device *dev;
+	struct serdes28g_pll pll[SERDES28G_NUM_PLL];
+};
+
+struct serdes28g_lane {
+	struct serdes28g_priv *priv;
+	bool powered_up;
+	unsigned id;
+};
+
+static void serdes28g_rmw(struct serdes28g_priv *priv, unsigned long off,
+			    u32 val, u32 mask)
+{
+	void __iomem *reg = priv->base + off;
+	u32 orig, tmp;
+
+	orig = ioread32(reg);
+	tmp = orig & ~mask;
+	tmp |= val;
+	iowrite32(tmp, reg);
+}
+
+#define serdes28g_lane_rmw(lane, reg, val, mask)	\
+	serdes28g_rmw((lane)->priv, SERDES28G_##reg(lane->id), SERDES28G_##reg##_##val, SERDES28G_##reg##_##mask)
+
+#define serdes28g_lane_read(lane, reg)			\
+	ioread32((lane)->priv->base + SERDES28G_##reg((lane)->id))
+#define serdes28g_pll_read(pll, reg)			\
+	ioread32((pll)->priv->base + SERDES28G_##reg((pll)->id))
+
+static bool serdes28g_supports_interface(struct serdes28g_priv *priv, int intf)
+{
+	int i;
+
+	for (i = 0; i < SERDES28G_NUM_PLL; i++)
+		if (test_bit(intf, priv->pll[i].supported))
+			return true;
+
+	return false;
+}
+
+static struct serdes28g_pll *serdes28g_pll_get(struct serdes28g_priv *priv,
+					       phy_interface_t intf)
+{
+	struct serdes28g_pll *pll;
+	int i;
+
+	for (i = 0; i < SERDES28G_NUM_PLL; i++) {
+		pll = &priv->pll[i];
+		if (test_bit(intf, pll->supported))
+			return pll;
+	}
+
+	return NULL;
+}
+
+static void serdes28g_lane_set_nrate(struct serdes28g_lane *lane,
+				     struct serdes28g_pll *pll,
+				     phy_interface_t intf)
+{
+	switch (SERDES28G_PLLnCR1_FRATE_SEL(pll->cr1)) {
+	case SERDES28G_PLLnCR1_FRATE_5G_10GVCO:
+	case SERDES28G_PLLnCR1_FRATE_5G_25GVCO:
+		switch (intf) {
+		case PHY_INTERFACE_MODE_SGMII:
+		case PHY_INTERFACE_MODE_1000BASEX:
+			serdes28g_lane_rmw(lane, LNaTGCR0, N_RATE_QUARTER, N_RATE_MSK);
+			serdes28g_lane_rmw(lane, LNaRGCR0, N_RATE_QUARTER, N_RATE_MSK);
+			break;
+		default:
+			break;
+		}
+		break;
+	case SERDES28G_PLLnCR1_FRATE_10G_20GVCO:
+		switch (intf) {
+		case PHY_INTERFACE_MODE_10GBASER:
+		case PHY_INTERFACE_MODE_USXGMII:
+			serdes28g_lane_rmw(lane, LNaTGCR0, N_RATE_FULL, N_RATE_MSK);
+			serdes28g_lane_rmw(lane, LNaRGCR0, N_RATE_FULL, N_RATE_MSK);
+			break;
+		default:
+			break;
+		}
+		break;
+	default:
+		break;
+	}
+}
+
+static void serdes28g_lane_set_pll(struct serdes28g_lane *lane,
+				   struct serdes28g_pll *pll)
+{
+	if (pll->id == 0) {
+		serdes28g_lane_rmw(lane, LNaTGCR0, USE_PLLF, USE_PLL_MSK);
+		serdes28g_lane_rmw(lane, LNaRGCR0, USE_PLLF, USE_PLL_MSK);
+	} else {
+		serdes28g_lane_rmw(lane, LNaTGCR0, USE_PLLS, USE_PLL_MSK);
+		serdes28g_lane_rmw(lane, LNaRGCR0, USE_PLLS, USE_PLL_MSK);
+	}
+}
+
+static int serdes28g_lane_set_sgmii(struct serdes28g_lane *lane)
+{
+	struct serdes28g_priv *priv = lane->priv;
+	struct serdes28g_pll *pll;
+	u32 lane_mask, lane_offset;
+
+	lane_offset = (4 * (SERDES28G_NUM_LANE - lane->id - 1));
+	lane_mask = GENMASK(3,0) << lane_offset;
+
+	/* Disable the SXGMII lane */
+	serdes28g_rmw(priv, SERDES28G_PCCC,
+		      SERDES28G_PCCC_SXGMII_DIS << lane_offset, lane_mask);
+
+	/* This lane runs in SGMII mode */
+	serdes28g_rmw(priv, SERDES28G_PCC8,
+		      SERDES28G_PCC8_SGMII << lane_offset, lane_mask);
+
+	/* Setup the protocol select and SerDes parallel interface width */
+	serdes28g_lane_rmw(lane, LNaGCR0, PROTO_SEL_SGMII, PROTO_SEL_MSK);
+	serdes28g_lane_rmw(lane, LNaGCR0, IF_WIDTH_10_BIT, IF_WIDTH_MSK);
+
+	/* Switch to the PLL that works with this interface type */
+	pll = serdes28g_pll_get(priv, PHY_INTERFACE_MODE_SGMII);
+	serdes28g_lane_set_pll(lane, pll);
+
+	/* Choose the portion of clock net to be used on this lane */
+	serdes28g_lane_set_nrate(lane, pll, PHY_INTERFACE_MODE_SGMII);
+
+	/* Enable the SGMII PCS */
+	serdes28g_lane_rmw(lane, SGMIIaCR1, SGPCS_EN, SGPCS_MSK);
+
+	return 0;
+}
+
+static int serdes28g_lane_set_10gbaser(struct serdes28g_lane *lane)
+{
+	struct serdes28g_priv *priv = lane->priv;
+	u32 lane_mask, lane_offset;
+	struct serdes28g_pll *pll;
+
+	lane_offset = (4 * (SERDES28G_NUM_LANE - lane->id - 1));
+	lane_mask = GENMASK(3,0) << lane_offset;
+
+	/* Stop the lane from running in SGMII/1000Base-x/1000Base-KX mode */
+	serdes28g_rmw(priv, SERDES28G_PCC8,
+		      SERDES28G_PCC8_SGMII_DIS << lane_offset, lane_mask);
+
+	/* Enable the SXGMII lane */
+	serdes28g_rmw(priv, SERDES28G_PCCC,
+		      SERDES28G_PCCC_10GBASER << lane_offset, lane_mask);
+
+	/* Setup the protocol select and SerDes parallel interface width */
+	serdes28g_lane_rmw(lane, LNaGCR0, PROTO_SEL_XFI, PROTO_SEL_MSK);
+	serdes28g_lane_rmw(lane, LNaGCR0, IF_WIDTH_20_BIT, IF_WIDTH_MSK);
+
+	/* Switch to the PLL that works with this interface type */
+	pll = serdes28g_pll_get(priv, PHY_INTERFACE_MODE_10GBASER);
+	serdes28g_lane_set_pll(lane, pll);
+
+	/* Choose the portion of clock net to be used on this lane */
+	serdes28g_lane_set_nrate(lane, pll, PHY_INTERFACE_MODE_10GBASER);
+
+	/* Disable the SGMII PCS */
+	serdes28g_lane_rmw(lane, SGMIIaCR1, SGPCS_DIS, SGPCS_MSK);
+
+	return 0;
+}
+
+static int serdes28g_set_mode(struct phy *phy, enum phy_mode mode, int submode)
+{
+	struct serdes28g_lane *lane = phy_get_drvdata(phy);
+	struct serdes28g_priv *priv = lane->priv;
+	int err;
+
+	if (mode != PHY_MODE_ETHERNET)
+		return -EOPNOTSUPP;
+
+	if (!serdes28g_supports_interface(priv, submode))
+		return -EOPNOTSUPP;
+
+	switch (submode) {
+	case PHY_INTERFACE_MODE_SGMII:
+	case PHY_INTERFACE_MODE_1000BASEX:
+		err = serdes28g_lane_set_sgmii(lane);
+		break;
+	case PHY_INTERFACE_MODE_10GBASER:
+		err = serdes28g_lane_set_10gbaser(lane);
+		break;
+	default:
+		return -EOPNOTSUPP;
+	}
+
+	return err;
+}
+
+static int serdes28g_power_off(struct phy *phy)
+{
+	struct serdes28g_lane *lane = phy_get_drvdata(phy);
+	u32 trstctl, rrstctl;
+
+	if (!lane->powered_up)
+		return 0;
+
+	/* Issue a halt request */
+	serdes28g_lane_rmw(lane, LNaTRSTCTL, HLT_REQ, HLT_REQ);
+	serdes28g_lane_rmw(lane, LNaRRSTCTL, HLT_REQ, HLT_REQ);
+
+	/* Wait until the halting process is complete */
+	do {
+		trstctl = serdes28g_lane_read(lane, LNaTRSTCTL);
+		rrstctl = serdes28g_lane_read(lane, LNaRRSTCTL);
+	} while ((trstctl & SERDES28G_LNaTRSTCTL_HLT_REQ) ||
+		 (rrstctl & SERDES28G_LNaRRSTCTL_HLT_REQ));
+
+	lane->powered_up = false;
+
+	return 0;
+}
+
+static int serdes28g_power_on(struct phy *phy)
+{
+	struct serdes28g_lane *lane = phy_get_drvdata(phy);
+	u32 trstctl, rrstctl;
+
+	if (lane->powered_up)
+		return 0;
+
+	/* Issue a reset request on the lane */
+	serdes28g_lane_rmw(lane, LNaTRSTCTL, RST_REQ, RST_REQ);
+	serdes28g_lane_rmw(lane, LNaRRSTCTL, RST_REQ, RST_REQ);
+
+	/* Wait until the reset sequence is completed */
+	do {
+		trstctl = serdes28g_lane_read(lane, LNaTRSTCTL);
+		rrstctl = serdes28g_lane_read(lane, LNaRRSTCTL);
+	} while (!(trstctl & SERDES28G_LNaTRSTCTL_RST_DONE) ||
+		 !(rrstctl & SERDES28G_LNaRRSTCTL_RST_DONE));
+
+	lane->powered_up = true;
+
+	return 0;
+}
+
+static const struct phy_ops serdes28g_ops = {
+	.power_on	= serdes28g_power_on,
+	.power_off	= serdes28g_power_off,
+	.set_mode	= serdes28g_set_mode,
+	.owner		= THIS_MODULE,
+};
+
+static void serdes26_pll_dump(struct serdes28g_pll *pll)
+{
+	struct serdes28g_priv *priv = pll->priv;
+	bool dis, lock;
+	u32 refclk, frate;
+	int intf;
+
+	dis = SERDES28G_PLLnRSTCTL_DIS(pll->rstctl) != 0 ? true : false;
+	lock = SERDES28G_PLLnRSTCTL_LOCK(pll->rstctl) != 0 ? true : false;
+	refclk = SERDES28G_PLLnCR0_REFCLK_SEL(pll->cr0);
+	frate = (SERDES28G_PLLnCR1_FRATE_SEL(pll->cr1));
+
+	dev_err(priv->dev, "PLL%c: %sabled, %slocked\n",
+		pll->id == 0 ? 'F' : 'S',
+		dis ? "dis" : "en",
+		lock ? "" : "un");
+
+	switch (refclk) {
+	case SERDES28G_PLLnCR0_REFCLK_SEL_100MHZ:
+		dev_err(priv->dev, "\tReference clock: 100MHz\n");
+		break;
+	case SERDES28G_PLLnCR0_REFCLK_SEL_125MHZ:
+		dev_err(priv->dev, "\tReference clock: 125MHz\n");
+		break;
+	case SERDES28G_PLLnCR0_REFCLK_SEL_156MHZ:
+		dev_err(priv->dev, "\tReference clock: 156.25MHz\n");
+		break;
+	case SERDES28G_PLLnCR0_REFCLK_SEL_150MHZ:
+		dev_err(priv->dev, "\tReference clock: 150MHz\n");
+		break;
+	case SERDES28G_PLLnCR0_REFCLK_SEL_161MHZ:
+		dev_err(priv->dev, "\tReference clock: 161.1328125MHz\n");
+		break;
+	default:
+		break;
+	}
+
+	switch (frate) {
+	case SERDES28G_PLLnCR1_FRATE_5G_10GVCO:
+	case SERDES28G_PLLnCR1_FRATE_5G_25GVCO:
+		dev_err(priv->dev, "\tclock net: 5GHz\n");
+		break;
+	case SERDES28G_PLLnCR1_FRATE_10G_20GVCO:
+		dev_err(priv->dev, "\tclock net: 10.3125GHz\n");
+		break;
+	default:
+		/* 6GHz, 12.890625GHz, 8GHz */
+		break;
+	}
+
+	dev_err(priv->dev, "\tSupported interfaces:\n");
+	for (intf = 0; intf < PHY_INTERFACE_MODE_MAX; intf++) {
+		if (test_bit(intf, pll->supported))
+			dev_err(priv->dev, "\t\t%s\n", phy_modes(intf));
+	}
+}
+
+static void serdes28g_pll_read_configuration(struct serdes28g_priv *priv)
+{
+	struct serdes28g_pll *pll;
+	int i;
+
+	for (i = 0; i < SERDES28G_NUM_PLL; i++) {
+		pll = &priv->pll[i];
+		pll->priv = priv;
+		pll->id = i;
+
+		pll->rstctl = serdes28g_pll_read(pll, PLLnRSTCTL);
+		pll->cr0 = serdes28g_pll_read(pll, PLLnCR0);
+		pll->cr1 = serdes28g_pll_read(pll, PLLnCR1);
+
+		switch (SERDES28G_PLLnCR1_FRATE_SEL(pll->cr1)) {
+		case SERDES28G_PLLnCR1_FRATE_5G_10GVCO:
+		case SERDES28G_PLLnCR1_FRATE_5G_25GVCO:
+			/* 5GHz clock net */
+			__set_bit(PHY_INTERFACE_MODE_1000BASEX, pll->supported);
+			__set_bit(PHY_INTERFACE_MODE_SGMII, pll->supported);
+			__set_bit(PHY_INTERFACE_MODE_QSGMII, pll->supported);
+			break;
+		case SERDES28G_PLLnCR1_FRATE_10G_20GVCO:
+			/* 10.3125GHz clock net */
+			__set_bit(PHY_INTERFACE_MODE_10GBASER, pll->supported);
+			__set_bit(PHY_INTERFACE_MODE_USXGMII, pll->supported);
+			break;
+		default:
+			/* 6GHz, 12.890625GHz, 8GHz */
+			break;
+		}
+
+		serdes26_pll_dump(pll);
+	}
+}
+
+static int serdes28g_probe(struct platform_device *pdev)
+{
+	struct phy_provider *provider;
+	struct serdes28g_priv *priv;
+	struct device_node *child;
+	int err;
+
+	priv = devm_kzalloc(&pdev->dev, sizeof(*priv), GFP_KERNEL);
+	if (!priv)
+		return -ENOMEM;
+	priv->dev = &pdev->dev;
+
+	priv->base = devm_platform_ioremap_resource(pdev, 0);
+	if (IS_ERR(priv->base))
+		return PTR_ERR(priv->base);
+
+	serdes28g_pll_read_configuration(priv);
+
+	for_each_available_child_of_node(pdev->dev.of_node, child) {
+		struct serdes28g_lane *lane;
+		struct phy *phy;
+		u32 val;
+
+		err = of_property_read_u32(child, "reg", &val);
+		if (err < 0) {
+			dev_err(&pdev->dev, "missing 'reg' property (%d)\n", err);
+			continue;
+		}
+
+		if (val >= SERDES28G_NUM_LANE) {
+			dev_err(&pdev->dev, "invalid 'reg' property\n");
+			continue;
+		}
+
+		lane = devm_kzalloc(&pdev->dev, sizeof(*lane), GFP_KERNEL);
+		if (!lane) {
+			of_node_put(child);
+			return -ENOMEM;
+		}
+
+		phy = devm_phy_create(&pdev->dev, child, &serdes28g_ops);
+		if (IS_ERR(phy)) {
+			of_node_put(child);
+			return PTR_ERR(phy);
+		}
+
+		lane->priv = priv;
+		lane->id = val;
+		lane->powered_up = true;
+		phy_set_drvdata(phy, lane);
+
+		phy_power_on(phy);
+
+		dev_err(priv->dev, "created PHY for lane #%d\n", lane->id);
+	}
+
+	dev_set_drvdata(&pdev->dev, priv);
+	provider = devm_of_phy_provider_register(&pdev->dev,
+						 of_phy_simple_xlate);
+
+	return PTR_ERR_OR_ZERO(provider);
+}
+
+static const struct of_device_id serdes28g_of_match_table[] = {
+	{ .compatible = "fsl,serdes-28g" },
+	{ },
+};
+MODULE_DEVICE_TABLE(of, serdes28g_of_match_table);
+
+static struct platform_driver serdes28g_driver = {
+	.probe	= serdes28g_probe,
+	.driver	= {
+		.name = "serdes-28g",
+		.of_match_table = serdes28g_of_match_table,
+	},
+};
+module_platform_driver(serdes28g_driver);
+
+MODULE_AUTHOR("Ioana Ciornei <ioana.ciornei@nxp.com>");
+MODULE_DESCRIPTION("SerDes 28G PHY driver for Layerscape SoCs");
-- 
2.34.1

