From 2bff56857b59ae848f8d186845eb1c51b815caaf Mon Sep 17 00:00:00 2001
From: Josua Mayer <josua@solid-run.com>
Date: Sun, 20 Nov 2022 10:20:12 +0200
Subject: [PATCH 33/45] Revert serdes driver

Revert "dpaa2-eth: configure MAC XIF_MODE register appropriately for rgmii modes"
Revert "dpaa2-eth: configure the MAC XIF_MODE register on protocol change"
Revert "dpaa2-eth: configure the SerDes phy on a protocol change"
Revert "phy: add support for the Layerscape SerDes 28G"
Revert "arm64: dts: lx2160a: describe the SerDes block #1"

Signed-off-by: Josua Mayer <josua@solid-run.com>
---
 .../freescale/fsl-lx2160a-clearfog-itx.dtsi   |   4 -
 .../arm64/boot/dts/freescale/fsl-lx2160a.dtsi |  42 --
 .../net/ethernet/freescale/dpaa2/dpaa2-mac.c  | 103 ++--
 .../net/ethernet/freescale/dpaa2/dpaa2-mac.h  |   3 -
 drivers/phy/freescale/Kconfig                 |   8 -
 drivers/phy/freescale/Makefile                |   1 -
 drivers/phy/freescale/phy-fsl-serdes-28g.c    | 521 ------------------
 7 files changed, 34 insertions(+), 648 deletions(-)
 delete mode 100644 drivers/phy/freescale/phy-fsl-serdes-28g.c

diff --git a/arch/arm64/boot/dts/freescale/fsl-lx2160a-clearfog-itx.dtsi b/arch/arm64/boot/dts/freescale/fsl-lx2160a-clearfog-itx.dtsi
index 440e94f24c25..74ae703e0f53 100644
--- a/arch/arm64/boot/dts/freescale/fsl-lx2160a-clearfog-itx.dtsi
+++ b/arch/arm64/boot/dts/freescale/fsl-lx2160a-clearfog-itx.dtsi
@@ -63,25 +63,21 @@ sfp3: sfp-3 {
 &dpmac7 {
 	sfp = <&sfp0>;
 	managed = "in-band-status";
-	phys = <&serdes1_lane_d>;
 };
 
 &dpmac8 {
 	sfp = <&sfp1>;
 	managed = "in-band-status";
-	phys = <&serdes1_lane_c>;
 };
 
 &dpmac9 {
 	sfp = <&sfp2>;
 	managed = "in-band-status";
-	phys = <&serdes1_lane_b>;
 };
 
 &dpmac10 {
 	sfp = <&sfp3>;
 	managed = "in-band-status";
-	phys = <&serdes1_lane_a>;
 };
 
 &emdio2 {
diff --git a/arch/arm64/boot/dts/freescale/fsl-lx2160a.dtsi b/arch/arm64/boot/dts/freescale/fsl-lx2160a.dtsi
index 53e5881afd36..fd14b4c5b9fb 100644
--- a/arch/arm64/boot/dts/freescale/fsl-lx2160a.dtsi
+++ b/arch/arm64/boot/dts/freescale/fsl-lx2160a.dtsi
@@ -613,48 +613,6 @@ soc {
 		ranges;
 		dma-ranges = <0x0 0x0 0x0 0x0 0x10000 0x00000000>;
 
-		serdes_1: serdes_phy@1ea0000 {
-			compatible = "fsl,serdes-28g";
-			reg = <0x00 0x1ea0000 0x0 0x1e30>;
-			#address-cells = <1>;
-			#size-cells = <0>;
-			#phy-cells = <1>;
-
-			serdes1_lane_a: phy@0 {
-				reg = <0>;
-				#phy-cells = <0>;
-			};
-			serdes1_lane_b: phy@1 {
-				reg = <1>;
-				#phy-cells = <0>;
-			};
-			serdes1_lane_c: phy@2 {
-				reg = <2>;
-				#phy-cells = <0>;
-			};
-			serdes1_lane_d: phy@3 {
-				reg = <3>;
-				#phy-cells = <0>;
-			};
-			serdes1_lane_e: phy@4 {
-				reg = <4>;
-				#phy-cells = <0>;
-			};
-			serdes1_lane_f: phy@5 {
-				reg = <5>;
-				#phy-cells = <0>;
-			};
-			serdes1_lane_g: phy@6 {
-				reg = <6>;
-				#phy-cells = <0>;
-			};
-			serdes1_lane_h: phy@7 {
-				reg = <7>;
-				#phy-cells = <0>;
-			};
-		};
-
-
 		serdes_2: serdes_phy@1eb0000 {
 			compatible = "fsl,serdes-28g";
 			reg = <0x00 0x1eb0000 0x0 0x1e30>;
diff --git a/drivers/net/ethernet/freescale/dpaa2/dpaa2-mac.c b/drivers/net/ethernet/freescale/dpaa2/dpaa2-mac.c
index 2ec4c940dc99..b4d8dcb5e74b 100644
--- a/drivers/net/ethernet/freescale/dpaa2/dpaa2-mac.c
+++ b/drivers/net/ethernet/freescale/dpaa2/dpaa2-mac.c
@@ -4,7 +4,6 @@
 #include <linux/fsl/mc.h>
 #include <linux/msi.h>
 #include <linux/acpi.h>
-#include <linux/phy/phy.h>
 #include <linux/property.h>
 #include <linux/leds.h>
 
@@ -108,12 +107,46 @@ static int dpaa2_mac_get_if_mode(struct fwnode_handle *dpmac_node,
 	return err;
 }
 
+static bool dpaa2_mac_phy_mode_mismatch(struct dpaa2_mac *mac,
+					phy_interface_t interface)
+{
+	switch (interface) {
+	/* We can switch between SGMII and 1000BASE-X at runtime with
+	 * pcs-lynx
+	 */
+	case PHY_INTERFACE_MODE_SGMII:
+	case PHY_INTERFACE_MODE_1000BASEX:
+		if (mac->pcs &&
+		    (mac->if_mode == PHY_INTERFACE_MODE_SGMII ||
+		     mac->if_mode == PHY_INTERFACE_MODE_1000BASEX))
+			return false;
+		return interface != mac->if_mode;
+
+	case PHY_INTERFACE_MODE_10GBASER:
+	case PHY_INTERFACE_MODE_USXGMII:
+	case PHY_INTERFACE_MODE_QSGMII:
+	case PHY_INTERFACE_MODE_RGMII:
+	case PHY_INTERFACE_MODE_RGMII_ID:
+	case PHY_INTERFACE_MODE_RGMII_RXID:
+	case PHY_INTERFACE_MODE_RGMII_TXID:
+		return (interface != mac->if_mode);
+	default:
+		return true;
+	}
+}
+
 static void dpaa2_mac_validate(struct phylink_config *config,
 			       unsigned long *supported,
 			       struct phylink_link_state *state)
 {
+	struct dpaa2_mac *mac = phylink_to_dpaa2_mac(config);
 	__ETHTOOL_DECLARE_LINK_MODE_MASK(mask) = { 0, };
 
+	if (state->interface != PHY_INTERFACE_MODE_NA &&
+	    dpaa2_mac_phy_mode_mismatch(mac, state->interface)) {
+		goto empty_set;
+	}
+
 	phylink_set_port_modes(mask);
 	phylink_set(mask, Autoneg);
 	phylink_set(mask, Pause);
@@ -166,7 +199,6 @@ static void dpaa2_mac_config(struct phylink_config *config, unsigned int mode,
 {
 	struct dpaa2_mac *mac = phylink_to_dpaa2_mac(config);
 	struct dpmac_link_state *dpmac_state = &mac->state;
-	u32 if_mode = 0, orig, tmp;
 	int err;
 
 	if (state->an_enabled)
@@ -179,31 +211,6 @@ static void dpaa2_mac_config(struct phylink_config *config, unsigned int mode,
 	if (err)
 		netdev_err(mac->net_dev, "%s: dpmac_set_link_state() = %d\n",
 			   __func__, err);
-
-	switch (state->interface) {
-	case PHY_INTERFACE_MODE_10GBASER:
-	case PHY_INTERFACE_MODE_USXGMII:
-		if_mode = 0x1;
-		break;
-	case PHY_INTERFACE_MODE_RGMII:
-	case PHY_INTERFACE_MODE_RGMII_ID:
-	case PHY_INTERFACE_MODE_SGMII:
-	case PHY_INTERFACE_MODE_1000BASEX:
-		if_mode = 0x3;
-		break;
-	default:
-		netdev_err(mac->net_dev, "%s: unhandled link mode %i, expect rx/tx errors!\n", __func__, state->interface);
-		break;
-	}
-
-	orig = ioread32(mac->if_mode_reg);
-	tmp = orig & ~0x3;
-	tmp |= if_mode;
-	iowrite32(tmp, mac->if_mode_reg);
-
-	err = phy_set_mode_ext(mac->serdes_phy, PHY_MODE_ETHERNET, state->interface);
-	if (err)
-		netdev_err(mac->net_dev, "phy_set_mode_ext() = %d\n", err);
 }
 
 static void dpaa2_mac_link_up(struct phylink_config *config,
@@ -263,37 +270,11 @@ static void dpaa2_mac_link_down(struct phylink_config *config,
 		led_set_brightness(mac->link_status_led, LED_OFF);
 }
 
-static int dpaa2_mac_prepare(struct phylink_config *config, unsigned int mode,
-			     phy_interface_t interface)
-{
-	struct dpaa2_mac *mac = phylink_to_dpaa2_mac(config);
-
-	dpaa2_mac_link_down(config, mode, interface);
-
-	if (mac->serdes_phy)
-		phy_power_off(mac->serdes_phy);
-
-	return 0;
-}
-
-static int dpaa2_mac_finish(struct phylink_config *config, unsigned int mode,
-			    phy_interface_t interface)
-{
-	struct dpaa2_mac *mac = phylink_to_dpaa2_mac(config);
-
-	if (mac->serdes_phy)
-		phy_power_on(mac->serdes_phy);
-
-	return 0;
-}
-
 static const struct phylink_mac_ops dpaa2_mac_phylink_ops = {
 	.validate = dpaa2_mac_validate,
 	.mac_config = dpaa2_mac_config,
 	.mac_link_up = dpaa2_mac_link_up,
 	.mac_link_down = dpaa2_mac_link_down,
-	.mac_prepare = dpaa2_mac_prepare,
-	.mac_finish = dpaa2_mac_finish,
 };
 
 static int dpaa2_pcs_create(struct dpaa2_mac *mac,
@@ -347,7 +328,6 @@ int dpaa2_mac_connect(struct dpaa2_mac *mac)
 {
 	struct net_device *net_dev = mac->net_dev;
 	struct fwnode_handle *dpmac_node;
-	struct phy *serdes_phy = NULL;
 	struct phylink *phylink;
 	int err;
 
@@ -364,14 +344,6 @@ int dpaa2_mac_connect(struct dpaa2_mac *mac)
 		return -EINVAL;
 	mac->if_mode = err;
 
-	if (!phy_interface_mode_is_rgmii(mac->if_mode) &&
-	    is_of_node(dpmac_node)) {
-		serdes_phy = of_phy_get(to_of_node(dpmac_node), NULL);
-		if (IS_ERR(serdes_phy))
-			return -EPROBE_DEFER;
-	}
-	mac->serdes_phy = serdes_phy;
-
 	/* The MAC does not have the capability to add RGMII delays so
 	 * error out if the interface mode requests them and there is no PHY
 	 * to act upon them
@@ -441,7 +413,6 @@ int dpaa2_mac_open(struct dpaa2_mac *mac)
 {
 	struct fsl_mc_device *dpmac_dev = mac->mc_dev;
 	struct net_device *net_dev = mac->net_dev;
-	unsigned long if_mode_addr;
 	int err;
 
 	err = dpmac_open(mac->mc_io, 0, dpmac_dev->obj_desc.id,
@@ -464,12 +435,6 @@ int dpaa2_mac_open(struct dpaa2_mac *mac)
 	mac->fw_node = dpaa2_mac_get_node(&mac->mc_dev->dev, mac->attr.id);
 	net_dev->dev.of_node = to_of_node(mac->fw_node);
 
-	if_mode_addr = 0x8c07080 + 0x4000 * (dpmac_dev->obj_desc.id - 1);
-	mac->if_mode_reg = ioremap(if_mode_addr, 4);
-	if (!mac->if_mode_reg) {
-		netdev_err(net_dev, "ioremap on if_mode failed\n");
-	}
-
 	return 0;
 
 err_close_dpmac:
diff --git a/drivers/net/ethernet/freescale/dpaa2/dpaa2-mac.h b/drivers/net/ethernet/freescale/dpaa2/dpaa2-mac.h
index 60086fc9c985..bb37a78d08a4 100644
--- a/drivers/net/ethernet/freescale/dpaa2/dpaa2-mac.h
+++ b/drivers/net/ethernet/freescale/dpaa2/dpaa2-mac.h
@@ -27,9 +27,6 @@ struct dpaa2_mac {
 	struct lynx_pcs *pcs;
 	struct fwnode_handle *fw_node;
 
-	struct phy *serdes_phy;
-	void __iomem *if_mode_reg;
-
 	struct led_classdev *link_status_led;
 };
 
diff --git a/drivers/phy/freescale/Kconfig b/drivers/phy/freescale/Kconfig
index b46c28672dc2..29b05925e1c5 100644
--- a/drivers/phy/freescale/Kconfig
+++ b/drivers/phy/freescale/Kconfig
@@ -39,11 +39,3 @@ config PHY_FSL_IMX_PCIE
 	help
 	  Enable this to add support for the PCIE PHY as found on i.MX
 	  family of SOCs.
-
-config PHY_FSL_SERDES_28G
-	tristate "Freescale Layerscape SerDes PHY support"
-	depends on OF
-	select GENERIC_PHY
-	help
-	  Enable this to add support for the SerDes 28G PHY as found on NXP's
-	  Layerscape platform such as LX2160A.
diff --git a/drivers/phy/freescale/Makefile b/drivers/phy/freescale/Makefile
index 380809d3f34c..0675f155c47d 100644
--- a/drivers/phy/freescale/Makefile
+++ b/drivers/phy/freescale/Makefile
@@ -4,4 +4,3 @@ obj-$(CONFIG_PHY_FSL_IMX8MQ_USB)	+= phy-fsl-imx8mq-usb.o
 obj-$(CONFIG_PHY_MIXEL_MIPI_DPHY)	+= phy-fsl-imx8-mipi-dphy.o
 obj-$(CONFIG_PHY_SAMSUNG_HDMI_PHY)	+= phy-fsl-samsung-hdmi.o
 obj-$(CONFIG_PHY_FSL_IMX_PCIE)		+= phy-fsl-imx8-pcie.o
-obj-$(CONFIG_PHY_FSL_SERDES_28G)	+= phy-fsl-serdes-28g.o
diff --git a/drivers/phy/freescale/phy-fsl-serdes-28g.c b/drivers/phy/freescale/phy-fsl-serdes-28g.c
deleted file mode 100644
index 841edf6c0477..000000000000
--- a/drivers/phy/freescale/phy-fsl-serdes-28g.c
+++ /dev/null
@@ -1,521 +0,0 @@
-// SPDX-License-Identifier: GPL-2.0+
-/* Copyright (c) 2021 NXP. */
-
-#include <linux/module.h>
-#include <linux/phy.h>
-#include <linux/phy/phy.h>
-#include <linux/platform_device.h>
-
-#define SERDES28G_NUM_LANE			8
-#define SERDES28G_NUM_PLL			2
-
-/* General registers per SerDes block */
-#define SERDES28G_PCC8				0x10a0
-#define SERDES28G_PCC8_SGMII			0x1
-#define SERDES28G_PCC8_SGMII_DIS		0x0
-
-#define SERDES28G_PCCC				0x10b0
-#define SERDES28G_PCCC_10GBASER			0x9
-#define SERDES28G_PCCC_USXGMII			0x1
-#define SERDES28G_PCCC_SXGMII_DIS		0x0
-
-/* Per PLL registers */
-#define SERDES28G_PLLnRSTCTL(pll)		(0x400 + (pll) * 0x100 + 0x0)
-#define SERDES28G_PLLnRSTCTL_DIS(rstctl)	(((rstctl) & BIT(24)) >> 24)
-#define SERDES28G_PLLnRSTCTL_LOCK(rstctl)	(((rstctl) & BIT(23)) >> 23)
-
-#define SERDES28G_PLLnCR0(pll)			(0x400 + (pll) * 0x100 + 0x4)
-#define SERDES28G_PLLnCR0_REFCLK_SEL(cr0)	(((cr0) & GENMASK(20,16)))
-#define SERDES28G_PLLnCR0_REFCLK_SEL_100MHZ	0x0
-#define SERDES28G_PLLnCR0_REFCLK_SEL_125MHZ	0x10000
-#define SERDES28G_PLLnCR0_REFCLK_SEL_156MHZ	0x20000
-#define SERDES28G_PLLnCR0_REFCLK_SEL_150MHZ	0x30000
-#define SERDES28G_PLLnCR0_REFCLK_SEL_161MHZ	0x40000
-
-#define SERDES28G_PLLnCR1(pll)			(0x400 + (pll) * 0x100 + 0x8)
-#define SERDES28G_PLLnCR1_FRATE_SEL(cr1)	(((cr1) & GENMASK(28,24)))
-#define SERDES28G_PLLnCR1_FRATE_5G_10GVCO	0x0
-#define SERDES28G_PLLnCR1_FRATE_5G_25GVCO	0x10000000
-#define SERDES28G_PLLnCR1_FRATE_10G_20GVCO	0x6000000
-
-/* Per SerDes lane registers */
-/* Lane a General Control Register */
-#define SERDES28G_LNaGCR0(lane)			(0x800 + (lane) * 0x100 + 0x0)
-#define SERDES28G_LNaGCR0_PROTO_SEL_MSK		GENMASK(7,3)
-#define SERDES28G_LNaGCR0_PROTO_SEL_SGMII	0x8
-#define SERDES28G_LNaGCR0_PROTO_SEL_XFI		0x50
-#define SERDES28G_LNaGCR0_IF_WIDTH_MSK		GENMASK(2,0)
-#define SERDES28G_LNaGCR0_IF_WIDTH_10_BIT	0x0
-#define SERDES28G_LNaGCR0_IF_WIDTH_20_BIT	0x2
-
-/* Lane a Tx Reset Control Register */
-#define SERDES28G_LNaTRSTCTL(lane)		(0x800 + (lane) * 0x100 + 0x20)
-#define SERDES28G_LNaTRSTCTL_HLT_REQ		BIT(27)
-#define SERDES28G_LNaTRSTCTL_RST_DONE		BIT(30)
-#define SERDES28G_LNaTRSTCTL_RST_REQ		BIT(31)
-
-/* Lane a Tx General Control Register */
-#define SERDES28G_LNaTGCR0(lane)		(0x800 + (lane) * 0x100 + 0x24)
-#define SERDES28G_LNaTGCR0_USE_PLLF		0x0
-#define SERDES28G_LNaTGCR0_USE_PLLS		BIT(28)
-#define SERDES28G_LNaTGCR0_USE_PLL_MSK		BIT(28)
-#define SERDES28G_LNaTGCR0_N_RATE_FULL		0x0
-#define SERDES28G_LNaTGCR0_N_RATE_HALF		0x1000000
-#define SERDES28G_LNaTGCR0_N_RATE_QUARTER	0x2000000
-#define SERDES28G_LNaTGCR0_N_RATE_MSK		GENMASK(26,24)
-
-/* Lane a Rx Reset Control Register */
-#define SERDES28G_LNaRRSTCTL(lane)		(0x800 + (lane) * 0x100 + 0x40)
-#define SERDES28G_LNaRRSTCTL_HLT_REQ		BIT(27)
-#define SERDES28G_LNaRRSTCTL_RST_DONE		BIT(30)
-#define SERDES28G_LNaRRSTCTL_RST_REQ		BIT(31)
-
-/* Lane a Rx General Control Register */
-#define SERDES28G_LNaRGCR0(lane)		(0x800 + (lane) * 0x100 + 0x44)
-#define SERDES28G_LNaRGCR0_USE_PLLF		0x0
-#define SERDES28G_LNaRGCR0_USE_PLLS		BIT(28)
-#define SERDES28G_LNaRGCR0_USE_PLL_MSK		BIT(28)
-#define SERDES28G_LNaRGCR0_N_RATE_MSK		GENMASK(26,24)
-#define SERDES28G_LNaRGCR0_N_RATE_FULL		0x0
-#define SERDES28G_LNaRGCR0_N_RATE_HALF		0x1000000
-#define SERDES28G_LNaRGCR0_N_RATE_QUARTER	0x2000000
-#define SERDES28G_LNaRGCR0_N_RATE_MSK		GENMASK(26,24)
-
-#define SERDES28G_SGMIIaCR1(lane)		(0x1804 + (lane) * 0x10)
-#define SERDES28G_SGMIIaCR1_SGPCS_EN		BIT(11)
-#define SERDES28G_SGMIIaCR1_SGPCS_DIS		0x0
-#define SERDES28G_SGMIIaCR1_SGPCS_MSK		BIT(11)
-
-struct serdes28g_pll {
-	struct serdes28g_priv *priv;
-	u32 rstctl, cr0, cr1;
-	int id;
-	DECLARE_PHY_INTERFACE_MASK(supported);
-};
-
-struct serdes28g_priv {
-	void __iomem *base;
-	struct device *dev;
-	struct serdes28g_pll pll[SERDES28G_NUM_PLL];
-};
-
-struct serdes28g_lane {
-	struct serdes28g_priv *priv;
-	bool powered_up;
-	unsigned id;
-};
-
-static void serdes28g_rmw(struct serdes28g_priv *priv, unsigned long off,
-			    u32 val, u32 mask)
-{
-	void __iomem *reg = priv->base + off;
-	u32 orig, tmp;
-
-	orig = ioread32(reg);
-	tmp = orig & ~mask;
-	tmp |= val;
-	iowrite32(tmp, reg);
-}
-
-#define serdes28g_lane_rmw(lane, reg, val, mask)	\
-	serdes28g_rmw((lane)->priv, SERDES28G_##reg(lane->id), SERDES28G_##reg##_##val, SERDES28G_##reg##_##mask)
-
-#define serdes28g_lane_read(lane, reg)			\
-	ioread32((lane)->priv->base + SERDES28G_##reg((lane)->id))
-#define serdes28g_pll_read(pll, reg)			\
-	ioread32((pll)->priv->base + SERDES28G_##reg((pll)->id))
-
-static bool serdes28g_supports_interface(struct serdes28g_priv *priv, int intf)
-{
-	int i;
-
-	for (i = 0; i < SERDES28G_NUM_PLL; i++)
-		if (test_bit(intf, priv->pll[i].supported))
-			return true;
-
-	return false;
-}
-
-static struct serdes28g_pll *serdes28g_pll_get(struct serdes28g_priv *priv,
-					       phy_interface_t intf)
-{
-	struct serdes28g_pll *pll;
-	int i;
-
-	for (i = 0; i < SERDES28G_NUM_PLL; i++) {
-		pll = &priv->pll[i];
-		if (test_bit(intf, pll->supported))
-			return pll;
-	}
-
-	return NULL;
-}
-
-static void serdes28g_lane_set_nrate(struct serdes28g_lane *lane,
-				     struct serdes28g_pll *pll,
-				     phy_interface_t intf)
-{
-	switch (SERDES28G_PLLnCR1_FRATE_SEL(pll->cr1)) {
-	case SERDES28G_PLLnCR1_FRATE_5G_10GVCO:
-	case SERDES28G_PLLnCR1_FRATE_5G_25GVCO:
-		switch (intf) {
-		case PHY_INTERFACE_MODE_SGMII:
-		case PHY_INTERFACE_MODE_1000BASEX:
-			serdes28g_lane_rmw(lane, LNaTGCR0, N_RATE_QUARTER, N_RATE_MSK);
-			serdes28g_lane_rmw(lane, LNaRGCR0, N_RATE_QUARTER, N_RATE_MSK);
-			break;
-		default:
-			break;
-		}
-		break;
-	case SERDES28G_PLLnCR1_FRATE_10G_20GVCO:
-		switch (intf) {
-		case PHY_INTERFACE_MODE_10GBASER:
-		case PHY_INTERFACE_MODE_USXGMII:
-			serdes28g_lane_rmw(lane, LNaTGCR0, N_RATE_FULL, N_RATE_MSK);
-			serdes28g_lane_rmw(lane, LNaRGCR0, N_RATE_FULL, N_RATE_MSK);
-			break;
-		default:
-			break;
-		}
-		break;
-	default:
-		break;
-	}
-}
-
-static void serdes28g_lane_set_pll(struct serdes28g_lane *lane,
-				   struct serdes28g_pll *pll)
-{
-	if (pll->id == 0) {
-		serdes28g_lane_rmw(lane, LNaTGCR0, USE_PLLF, USE_PLL_MSK);
-		serdes28g_lane_rmw(lane, LNaRGCR0, USE_PLLF, USE_PLL_MSK);
-	} else {
-		serdes28g_lane_rmw(lane, LNaTGCR0, USE_PLLS, USE_PLL_MSK);
-		serdes28g_lane_rmw(lane, LNaRGCR0, USE_PLLS, USE_PLL_MSK);
-	}
-}
-
-static int serdes28g_lane_set_sgmii(struct serdes28g_lane *lane)
-{
-	struct serdes28g_priv *priv = lane->priv;
-	struct serdes28g_pll *pll;
-	u32 lane_mask, lane_offset;
-
-	lane_offset = (4 * (SERDES28G_NUM_LANE - lane->id - 1));
-	lane_mask = GENMASK(3,0) << lane_offset;
-
-	/* Disable the SXGMII lane */
-	serdes28g_rmw(priv, SERDES28G_PCCC,
-		      SERDES28G_PCCC_SXGMII_DIS << lane_offset, lane_mask);
-
-	/* This lane runs in SGMII mode */
-	serdes28g_rmw(priv, SERDES28G_PCC8,
-		      SERDES28G_PCC8_SGMII << lane_offset, lane_mask);
-
-	/* Setup the protocol select and SerDes parallel interface width */
-	serdes28g_lane_rmw(lane, LNaGCR0, PROTO_SEL_SGMII, PROTO_SEL_MSK);
-	serdes28g_lane_rmw(lane, LNaGCR0, IF_WIDTH_10_BIT, IF_WIDTH_MSK);
-
-	/* Switch to the PLL that works with this interface type */
-	pll = serdes28g_pll_get(priv, PHY_INTERFACE_MODE_SGMII);
-	serdes28g_lane_set_pll(lane, pll);
-
-	/* Choose the portion of clock net to be used on this lane */
-	serdes28g_lane_set_nrate(lane, pll, PHY_INTERFACE_MODE_SGMII);
-
-	/* Enable the SGMII PCS */
-	serdes28g_lane_rmw(lane, SGMIIaCR1, SGPCS_EN, SGPCS_MSK);
-
-	return 0;
-}
-
-static int serdes28g_lane_set_10gbaser(struct serdes28g_lane *lane)
-{
-	struct serdes28g_priv *priv = lane->priv;
-	u32 lane_mask, lane_offset;
-	struct serdes28g_pll *pll;
-
-	lane_offset = (4 * (SERDES28G_NUM_LANE - lane->id - 1));
-	lane_mask = GENMASK(3,0) << lane_offset;
-
-	/* Stop the lane from running in SGMII/1000Base-x/1000Base-KX mode */
-	serdes28g_rmw(priv, SERDES28G_PCC8,
-		      SERDES28G_PCC8_SGMII_DIS << lane_offset, lane_mask);
-
-	/* Enable the SXGMII lane */
-	serdes28g_rmw(priv, SERDES28G_PCCC,
-		      SERDES28G_PCCC_10GBASER << lane_offset, lane_mask);
-
-	/* Setup the protocol select and SerDes parallel interface width */
-	serdes28g_lane_rmw(lane, LNaGCR0, PROTO_SEL_XFI, PROTO_SEL_MSK);
-	serdes28g_lane_rmw(lane, LNaGCR0, IF_WIDTH_20_BIT, IF_WIDTH_MSK);
-
-	/* Switch to the PLL that works with this interface type */
-	pll = serdes28g_pll_get(priv, PHY_INTERFACE_MODE_10GBASER);
-	serdes28g_lane_set_pll(lane, pll);
-
-	/* Choose the portion of clock net to be used on this lane */
-	serdes28g_lane_set_nrate(lane, pll, PHY_INTERFACE_MODE_10GBASER);
-
-	/* Disable the SGMII PCS */
-	serdes28g_lane_rmw(lane, SGMIIaCR1, SGPCS_DIS, SGPCS_MSK);
-
-	return 0;
-}
-
-static int serdes28g_set_mode(struct phy *phy, enum phy_mode mode, int submode)
-{
-	struct serdes28g_lane *lane = phy_get_drvdata(phy);
-	struct serdes28g_priv *priv = lane->priv;
-	int err;
-
-	if (mode != PHY_MODE_ETHERNET)
-		return -EOPNOTSUPP;
-
-	if (!serdes28g_supports_interface(priv, submode))
-		return -EOPNOTSUPP;
-
-	switch (submode) {
-	case PHY_INTERFACE_MODE_SGMII:
-	case PHY_INTERFACE_MODE_1000BASEX:
-		err = serdes28g_lane_set_sgmii(lane);
-		break;
-	case PHY_INTERFACE_MODE_10GBASER:
-		err = serdes28g_lane_set_10gbaser(lane);
-		break;
-	default:
-		return -EOPNOTSUPP;
-	}
-
-	return err;
-}
-
-static int serdes28g_power_off(struct phy *phy)
-{
-	struct serdes28g_lane *lane = phy_get_drvdata(phy);
-	u32 trstctl, rrstctl;
-
-	if (!lane->powered_up)
-		return 0;
-
-	/* Issue a halt request */
-	serdes28g_lane_rmw(lane, LNaTRSTCTL, HLT_REQ, HLT_REQ);
-	serdes28g_lane_rmw(lane, LNaRRSTCTL, HLT_REQ, HLT_REQ);
-
-	/* Wait until the halting process is complete */
-	do {
-		trstctl = serdes28g_lane_read(lane, LNaTRSTCTL);
-		rrstctl = serdes28g_lane_read(lane, LNaRRSTCTL);
-	} while ((trstctl & SERDES28G_LNaTRSTCTL_HLT_REQ) ||
-		 (rrstctl & SERDES28G_LNaRRSTCTL_HLT_REQ));
-
-	lane->powered_up = false;
-
-	return 0;
-}
-
-static int serdes28g_power_on(struct phy *phy)
-{
-	struct serdes28g_lane *lane = phy_get_drvdata(phy);
-	u32 trstctl, rrstctl;
-
-	if (lane->powered_up)
-		return 0;
-
-	/* Issue a reset request on the lane */
-	serdes28g_lane_rmw(lane, LNaTRSTCTL, RST_REQ, RST_REQ);
-	serdes28g_lane_rmw(lane, LNaRRSTCTL, RST_REQ, RST_REQ);
-
-	/* Wait until the reset sequence is completed */
-	do {
-		trstctl = serdes28g_lane_read(lane, LNaTRSTCTL);
-		rrstctl = serdes28g_lane_read(lane, LNaRRSTCTL);
-	} while (!(trstctl & SERDES28G_LNaTRSTCTL_RST_DONE) ||
-		 !(rrstctl & SERDES28G_LNaRRSTCTL_RST_DONE));
-
-	lane->powered_up = true;
-
-	return 0;
-}
-
-static const struct phy_ops serdes28g_ops = {
-	.power_on	= serdes28g_power_on,
-	.power_off	= serdes28g_power_off,
-	.set_mode	= serdes28g_set_mode,
-	.owner		= THIS_MODULE,
-};
-
-static void serdes26_pll_dump(struct serdes28g_pll *pll)
-{
-	struct serdes28g_priv *priv = pll->priv;
-	bool dis, lock;
-	u32 refclk, frate;
-	int intf;
-
-	dis = SERDES28G_PLLnRSTCTL_DIS(pll->rstctl) != 0 ? true : false;
-	lock = SERDES28G_PLLnRSTCTL_LOCK(pll->rstctl) != 0 ? true : false;
-	refclk = SERDES28G_PLLnCR0_REFCLK_SEL(pll->cr0);
-	frate = (SERDES28G_PLLnCR1_FRATE_SEL(pll->cr1));
-
-	dev_err(priv->dev, "PLL%c: %sabled, %slocked\n",
-		pll->id == 0 ? 'F' : 'S',
-		dis ? "dis" : "en",
-		lock ? "" : "un");
-
-	switch (refclk) {
-	case SERDES28G_PLLnCR0_REFCLK_SEL_100MHZ:
-		dev_err(priv->dev, "\tReference clock: 100MHz\n");
-		break;
-	case SERDES28G_PLLnCR0_REFCLK_SEL_125MHZ:
-		dev_err(priv->dev, "\tReference clock: 125MHz\n");
-		break;
-	case SERDES28G_PLLnCR0_REFCLK_SEL_156MHZ:
-		dev_err(priv->dev, "\tReference clock: 156.25MHz\n");
-		break;
-	case SERDES28G_PLLnCR0_REFCLK_SEL_150MHZ:
-		dev_err(priv->dev, "\tReference clock: 150MHz\n");
-		break;
-	case SERDES28G_PLLnCR0_REFCLK_SEL_161MHZ:
-		dev_err(priv->dev, "\tReference clock: 161.1328125MHz\n");
-		break;
-	default:
-		break;
-	}
-
-	switch (frate) {
-	case SERDES28G_PLLnCR1_FRATE_5G_10GVCO:
-	case SERDES28G_PLLnCR1_FRATE_5G_25GVCO:
-		dev_err(priv->dev, "\tclock net: 5GHz\n");
-		break;
-	case SERDES28G_PLLnCR1_FRATE_10G_20GVCO:
-		dev_err(priv->dev, "\tclock net: 10.3125GHz\n");
-		break;
-	default:
-		/* 6GHz, 12.890625GHz, 8GHz */
-		break;
-	}
-
-	dev_err(priv->dev, "\tSupported interfaces:\n");
-	for (intf = 0; intf < PHY_INTERFACE_MODE_MAX; intf++) {
-		if (test_bit(intf, pll->supported))
-			dev_err(priv->dev, "\t\t%s\n", phy_modes(intf));
-	}
-}
-
-static void serdes28g_pll_read_configuration(struct serdes28g_priv *priv)
-{
-	struct serdes28g_pll *pll;
-	int i;
-
-	for (i = 0; i < SERDES28G_NUM_PLL; i++) {
-		pll = &priv->pll[i];
-		pll->priv = priv;
-		pll->id = i;
-
-		pll->rstctl = serdes28g_pll_read(pll, PLLnRSTCTL);
-		pll->cr0 = serdes28g_pll_read(pll, PLLnCR0);
-		pll->cr1 = serdes28g_pll_read(pll, PLLnCR1);
-
-		switch (SERDES28G_PLLnCR1_FRATE_SEL(pll->cr1)) {
-		case SERDES28G_PLLnCR1_FRATE_5G_10GVCO:
-		case SERDES28G_PLLnCR1_FRATE_5G_25GVCO:
-			/* 5GHz clock net */
-			__set_bit(PHY_INTERFACE_MODE_1000BASEX, pll->supported);
-			__set_bit(PHY_INTERFACE_MODE_SGMII, pll->supported);
-			__set_bit(PHY_INTERFACE_MODE_QSGMII, pll->supported);
-			break;
-		case SERDES28G_PLLnCR1_FRATE_10G_20GVCO:
-			/* 10.3125GHz clock net */
-			__set_bit(PHY_INTERFACE_MODE_10GBASER, pll->supported);
-			__set_bit(PHY_INTERFACE_MODE_USXGMII, pll->supported);
-			break;
-		default:
-			/* 6GHz, 12.890625GHz, 8GHz */
-			break;
-		}
-
-		serdes26_pll_dump(pll);
-	}
-}
-
-static int serdes28g_probe(struct platform_device *pdev)
-{
-	struct phy_provider *provider;
-	struct serdes28g_priv *priv;
-	struct device_node *child;
-	int err;
-
-	priv = devm_kzalloc(&pdev->dev, sizeof(*priv), GFP_KERNEL);
-	if (!priv)
-		return -ENOMEM;
-	priv->dev = &pdev->dev;
-
-	priv->base = devm_platform_ioremap_resource(pdev, 0);
-	if (IS_ERR(priv->base))
-		return PTR_ERR(priv->base);
-
-	serdes28g_pll_read_configuration(priv);
-
-	for_each_available_child_of_node(pdev->dev.of_node, child) {
-		struct serdes28g_lane *lane;
-		struct phy *phy;
-		u32 val;
-
-		err = of_property_read_u32(child, "reg", &val);
-		if (err < 0) {
-			dev_err(&pdev->dev, "missing 'reg' property (%d)\n", err);
-			continue;
-		}
-
-		if (val >= SERDES28G_NUM_LANE) {
-			dev_err(&pdev->dev, "invalid 'reg' property\n");
-			continue;
-		}
-
-		lane = devm_kzalloc(&pdev->dev, sizeof(*lane), GFP_KERNEL);
-		if (!lane) {
-			of_node_put(child);
-			return -ENOMEM;
-		}
-
-		phy = devm_phy_create(&pdev->dev, child, &serdes28g_ops);
-		if (IS_ERR(phy)) {
-			of_node_put(child);
-			return PTR_ERR(phy);
-		}
-
-		lane->priv = priv;
-		lane->id = val;
-		lane->powered_up = true;
-		phy_set_drvdata(phy, lane);
-
-		phy_power_on(phy);
-
-		dev_err(priv->dev, "created PHY for lane #%d\n", lane->id);
-	}
-
-	dev_set_drvdata(&pdev->dev, priv);
-	provider = devm_of_phy_provider_register(&pdev->dev,
-						 of_phy_simple_xlate);
-
-	return PTR_ERR_OR_ZERO(provider);
-}
-
-static const struct of_device_id serdes28g_of_match_table[] = {
-	{ .compatible = "fsl,serdes-28g" },
-	{ },
-};
-MODULE_DEVICE_TABLE(of, serdes28g_of_match_table);
-
-static struct platform_driver serdes28g_driver = {
-	.probe	= serdes28g_probe,
-	.driver	= {
-		.name = "serdes-28g",
-		.of_match_table = serdes28g_of_match_table,
-	},
-};
-module_platform_driver(serdes28g_driver);
-
-MODULE_AUTHOR("Ioana Ciornei <ioana.ciornei@nxp.com>");
-MODULE_DESCRIPTION("SerDes 28G PHY driver for Layerscape SoCs");
-- 
2.38.1

